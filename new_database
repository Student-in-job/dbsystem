drop database elearning;
create schema if not exists elearning default character set utf8 collate utf8_general_ci ;
use elearning;

/*CREATE EVENT closer_course ON SCHEDULE EVERY 1 DAY 
DO update has_course set complited = now() 
where (select end_date from course where id = course) < now()
and complited is null;*/

/*grant all privileges on elearning_test.* to 'user'@'localhost';
flush privileges;*/

#Системные данные
create table if not exists sys_conf (
name varchar(25) not null,
value varchar(225) not null,
primary key(name)
);


#Данные пользоветеле, ключи и логи авторизации
create table if not exists user (
  id int not null auto_increment,
  name varchar(32) not null,
  surname varchar(32) not null,
  gender enum('m', 'w') not null,
  mail varchar(128) not null,
  addDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  deleted TINYINT not null default 0,
  primary key (id),
  unique (mail)
);

create table if not exists users_key (
	secret_key varchar(16) not null,
	secret_type enum('phone', 'key'),
	user int,
	addDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	constraint fk_users_key_user  foreign key (user) references user (id) on delete no action on update no action,
	unique(user, secret_type),
	unique(secret_key)
);

create table if not exists sms_code (
	sms_code int not null,
	user int,
	addDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	constraint fk_sms_code_user  foreign key (user) references user (id) on delete no action on update no action,
	unique(user)
);

create table if not exists auth (
	user varchar(128) not null,
	factor enum('phone', 'key'),
	mods char not null,
	result int,
	addDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	constraint fk_auth_user  foreign key (user) references user (mail) on delete no action on update no action
	
);


#Программы и курсы
create table if not exists area (
  id int not null auto_increment,
  name varchar(64) not null,
  deleted TINYINT not null default 0,
  addDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  unique(name),
  primary key (id)
);

create table if not exists program (
  id int not null auto_increment,
  addDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  name varchar(128) not null,
  description text(4096) not null,
  level int not null,
  state enum('created', 'active') not null default 'created',
  duration int not null,
  user int not null,
  area int not null,
  deleted TINYINT not null default 0,
  primary key (id),
  constraint fk_program_user  foreign key (user) references user (id) on delete no action on update no action,
  constraint fk_program_area foreign key (area) references area (id) on delete no action on update no action
);

create table if not exists course (
  id int not null auto_increment,
  addDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  start_date date not null,
  end_date date not null,
  program int not null,
  public int not null default 1,
  self_study int not null,
  deleted TINYINT not null default 0,
  primary key (id),
  constraint fk_course_program foreign key (program) references program (id) on delete no action on update no action
);

create table if not exists teaching (
  id int not null auto_increment,
  user int not null,
  addDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  course int not null,
  #start datetime not null,
  deleted TINYINT not null default 0,
  completed TINYINT not null default 0,
  primary key (id),
  unique(user, course),
  constraint fk_teaching_user  foreign key (user) references user (id) on delete no action on update no action,
  constraint fk_teaching_course foreign key (course) references course (id) on delete no action on update no action
);


#Задания
create table if not exists task (
  group_id int not null,
  id int not null auto_increment,
  addDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  name varchar(64) not null,
  day int not null,
  program int not null,
  total_count int not null,
  passing_count int not null,
  time int not null,
  starttime int not null,
  period int not null,
  deleted TINYINT not null default 0,
  primary key (id)
);

create table if not exists accept_task(
  id int not null auto_increment,
  addDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  teaching int not null,
  work_key varchar(36) not null,
  task int not null,
  completed int default -1,
  deleted TINYINT default 0,
  primary key (id),
  unique(work_key),
  constraint fk_accept_task_task  foreign key (task)  references task (id)    on delete no action    on update no action,
  constraint fk_accept_task_teaching  foreign key (teaching)  references teaching (id)    on delete no action    on update no action
);

/*
#Материалы
create table if not exists material (
  id int not null auto_increment,
  addDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  name varchar(64) not null,
  day int not null,
  text text,
  program int not null,
  description text(1024) not null,
  deleted TINYINT not null default 0,
  primary key (id),
  constraint fk_material_program foreign key (program) references program (id) on delete no action on update no action
);

create table if not exists files (
  id int not null auto_increment,
  addDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  real_name varchar(128) not null,
  title varchar(128) not null,
  material int not null,
  type varchar(10),
  deleted TINYINT not null default 0,
  primary key (id),
  constraint fk_files_matrial foreign key (material) references material (id) on delete no action on update no action
);

/*
#Тесты
create table if not exists test (
  id int not null auto_increment,
  addDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  name varchar(64) not null,
  day int not null,
  time int not null,
  passing_percent int not null,
  program int not null,
  deleted TINYINT not null default 0,
  primary key (id),
  constraint fk_test_program  foreign key (program)  references program (id)    on delete no action    on update no action);

create table if not exists test_task (
  id int not null auto_increment,
  addDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  question varchar(1024) not null,
  answer varchar(100) not null,
  v1 varchar(100) not null,
  v2 varchar(100) not null,
  v3 varchar(100) not null,
  v4 varchar(100) not null,
  ball int not null default 0,
  deleted TINYINT not null default 0,
  test int not null,
  primary key (id),
  constraint fk_test_task_test  foreign key (test)  references test (id)    on delete no action    on update no action);

create table if not exists accept_test (
  id int not null auto_increment,
  addDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  ball int null default null,
  has_course int not null,
  test int not null,
  deleted TINYINT default -1,
  primary key (id),
  constraint fk_accept_test_teaching  foreign key (has_course)  references teaching (id)    on delete no action    on update no action,
  constraint fk_accept_test_test  foreign key (test)  references test (id)    on delete no action    on update no action);
*/
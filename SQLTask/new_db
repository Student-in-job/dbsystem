drop database sql_task_service;
create database sql_task_service default character set utf8 collate utf8_general_ci;
use sql_task_service;

create table auth_service(
id int not null auto_increment,
name varchar(256) not null,
url varchar(128) not null,
my_key varchar(128) not null,
server_key varchar(128) not null,
unique (url),
unique (my_key),
primary key (id)
);

create table user(
id int not null auto_increment,
USER_ID int not null,
server_id int not null,
unique (USER_ID, server_id),
primary key (id),
foreign key (server_id) references auth_service(id)
);

create table task_list (
id int not null auto_increment,
user_id int not null,
public int not null default 1,
addDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
deleted int not null default 0,
#active int not null default 0,
list_name varchar(32) not null default 'unnamed',
primary key (id)
);

create table if not exists task (
id int not null auto_increment,
list_id int not null,
question text(2000) not null,
answer text(1000) not null,
img varchar(1000) default null,
ball int not null default 1,
time int not null default 3,
deleted int not null default 0,
addDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
primary key (id),
constraint fk_task_group foreign key (list_id) references task_list(id)
);

create table if not exists works (
id int not null auto_increment,
WORK_KEY varchar(64) not null,
user_id int not null,
list_id int not null,
live_time bigint not null,
count int not null,
addDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
primary key (id),
constraint fk_work_list foreign key (list_id) references task_list(id),
unique(WORK_KEY)
);

create table if not exists task_result(
id int not null auto_increment,
work_id int not null,
task_id int not null,
result int not null,
time int not null,
addDate timestamp not null DEFAULT CURRENT_TIMESTAMP,
primary key (id),
constraint fk_task_result foreign key (task_id) references task(id),
constraint fk_work_result foreign key (work_id) references works(id)
);